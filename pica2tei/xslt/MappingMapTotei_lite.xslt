<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns0="info:srw/schema/5/picaXML-v1.0" exclude-result-prefixes="agt xs fn ns0">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template name="agt:MapTotei_lite_var955_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var922_resultof_map" as="node()*">
			<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var953_result" as="xs:boolean">
			<xsl:choose>
				<xsl:when test="fn:exists($var922_resultof_map)">
					<xsl:variable name="var923_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var924_result" as="xs:string*">
						<xsl:for-each select="($var923_resultof_map/node())[fn:boolean(self::text())]">
							<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var924_result)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="fn:true()"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var954_let" as="node()?">
			<xsl:if test="$var953_result">
				<xsl:variable name="var925_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var952_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="fn:exists($var925_resultof_map)">
							<xsl:variable name="var926_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var927_result" as="xs:string*">
								<xsl:for-each select="($var926_resultof_map/node())[fn:boolean(self::text())]">
									<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var927_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:true()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="$var952_result">
					<xsl:variable name="var928_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var951_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="fn:exists($var928_resultof_map)">
								<xsl:variable name="var929_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var930_result" as="xs:string*">
									<xsl:for-each select="($var929_resultof_map/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var930_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:true()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var951_result">
						<xsl:variable name="var931_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var950_result" as="xs:boolean">
							<xsl:choose>
								<xsl:when test="fn:exists($var931_resultof_map)">
									<xsl:variable name="var932_resultof_map" as="node()*">
										<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
											<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</subfield>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var933_result" as="xs:string*">
										<xsl:for-each select="($var932_resultof_map/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:exists($var933_result)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="fn:true()"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="$var950_result">
							<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
								<xsl:variable name="var934_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var937_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var934_resultof_map)">
											<xsl:variable name="var935_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var936_result" as="xs:string*">
												<xsl:for-each select="($var935_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var936_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var938_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var941_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var938_resultof_map)">
											<xsl:variable name="var939_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var940_result" as="xs:string*">
												<xsl:for-each select="($var939_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var940_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var942_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var945_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var942_resultof_map)">
											<xsl:variable name="var943_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var944_result" as="xs:string*">
												<xsl:for-each select="($var943_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var944_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var946_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var949_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var946_resultof_map)">
											<xsl:variable name="var947_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var948_result" as="xs:string*">
												<xsl:for-each select="($var947_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var948_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat(fn:concat($var937_result, $var941_result), $var945_result), $var949_result)"/>
							</name>
						</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:if>
		</xsl:variable>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="$var954_let">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var990_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var957_resultof_map" as="node()*">
			<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var988_result" as="xs:boolean">
			<xsl:choose>
				<xsl:when test="fn:exists($var957_resultof_map)">
					<xsl:variable name="var958_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var959_result" as="xs:string*">
						<xsl:for-each select="($var958_resultof_map/node())[fn:boolean(self::text())]">
							<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:sequence select="fn:exists($var959_result)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="fn:true()"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var989_let" as="node()?">
			<xsl:if test="$var988_result">
				<xsl:variable name="var960_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var987_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="fn:exists($var960_resultof_map)">
							<xsl:variable name="var961_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var962_result" as="xs:string*">
								<xsl:for-each select="($var961_resultof_map/node())[fn:boolean(self::text())]">
									<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var962_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:true()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="$var987_result">
					<xsl:variable name="var963_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var986_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="fn:exists($var963_resultof_map)">
								<xsl:variable name="var964_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var965_result" as="xs:string*">
									<xsl:for-each select="($var964_resultof_map/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var965_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:true()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var986_result">
						<xsl:variable name="var966_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var985_result" as="xs:boolean">
							<xsl:choose>
								<xsl:when test="fn:exists($var966_resultof_map)">
									<xsl:variable name="var967_resultof_map" as="node()*">
										<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
											<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</subfield>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var968_result" as="xs:string*">
										<xsl:for-each select="($var967_resultof_map/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:exists($var968_result)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="fn:true()"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="$var985_result">
							<name xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
								<xsl:variable name="var969_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var972_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var969_resultof_map)">
											<xsl:variable name="var970_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var971_result" as="xs:string*">
												<xsl:for-each select="($var970_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var971_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var973_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var976_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var973_resultof_map)">
											<xsl:variable name="var974_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var975_result" as="xs:string*">
												<xsl:for-each select="($var974_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var975_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var977_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var980_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var977_resultof_map)">
											<xsl:variable name="var978_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var979_result" as="xs:string*">
												<xsl:for-each select="($var978_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var979_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var981_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var984_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($var981_resultof_map)">
											<xsl:variable name="var982_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var983_result" as="xs:string*">
												<xsl:for-each select="($var982_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var983_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat(fn:concat($var972_result, $var976_result), $var980_result), $var984_result)"/>
							</name>
						</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:if>
		</xsl:variable>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="$var989_let">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1072_function">
		<xsl:param name="par0" as="node()"/>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1035_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1035_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'h')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1036_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1036_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1037_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1037_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<name>
				<xsl:attribute name="type" namespace="" select="'person'"/>
				<xsl:variable name="var1038_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'P')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var1038_resultof_map">
					<xsl:sequence select="fn:string(.)"/>
				</xsl:for-each>
			</name>
			<name>
				<xsl:attribute name="type" namespace="" select="'person'"/>
				<xsl:variable name="var1039_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var1070_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="fn:exists($var1039_resultof_map)">
							<xsl:variable name="var1040_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var1041_result" as="xs:string*">
								<xsl:for-each select="($var1040_resultof_map/node())[fn:boolean(self::text())]">
									<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var1041_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:true()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var1071_let" as="node()?">
					<xsl:if test="$var1070_result">
						<xsl:variable name="var1042_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var1069_result" as="xs:boolean">
							<xsl:choose>
								<xsl:when test="fn:exists($var1042_resultof_map)">
									<xsl:variable name="var1043_resultof_map" as="node()*">
										<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
											<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</subfield>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var1044_result" as="xs:string*">
										<xsl:for-each select="($var1043_resultof_map/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:exists($var1044_result)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="fn:true()"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="$var1069_result">
							<xsl:variable name="var1045_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var1068_result" as="xs:boolean">
								<xsl:choose>
									<xsl:when test="fn:exists($var1045_resultof_map)">
										<xsl:variable name="var1046_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1047_result" as="xs:string*">
											<xsl:for-each select="($var1046_resultof_map/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:exists($var1047_result)"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:true()"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="$var1068_result">
								<xsl:variable name="var1048_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1067_result" as="xs:boolean">
									<xsl:choose>
										<xsl:when test="fn:exists($var1048_resultof_map)">
											<xsl:variable name="var1049_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var1050_result" as="xs:string*">
												<xsl:for-each select="($var1049_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:exists($var1050_result)"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:true()"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:if test="$var1067_result">
									<name xmlns:dcr="http://www.isocat.org/ns/dcr">
										<xsl:variable name="var1051_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1054_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1051_resultof_map)">
													<xsl:variable name="var1052_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1053_result" as="xs:string*">
														<xsl:for-each select="($var1052_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1053_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1055_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1058_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1055_resultof_map)">
													<xsl:variable name="var1056_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1057_result" as="xs:string*">
														<xsl:for-each select="($var1056_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1057_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1059_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1062_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1059_resultof_map)">
													<xsl:variable name="var1060_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1061_result" as="xs:string*">
														<xsl:for-each select="($var1060_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1061_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1063_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1066_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1063_resultof_map)">
													<xsl:variable name="var1064_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1065_result" as="xs:string*">
														<xsl:for-each select="($var1064_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1065_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat(fn:concat($var1054_result, $var1058_result), $var1062_result), $var1066_result)"/>
									</name>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:if>
				</xsl:variable>
				<xsl:for-each select="$var1071_let">
					<xsl:sequence select="fn:string(.)"/>
				</xsl:for-each>
			</name>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1111_function">
		<xsl:param name="par0" as="node()"/>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1074_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1074_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'h')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1075_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1075_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1076_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1076_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<name>
				<xsl:attribute name="type" namespace="" select="'person'"/>
				<xsl:variable name="var1077_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'P')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var1077_resultof_map">
					<xsl:sequence select="fn:string(.)"/>
				</xsl:for-each>
			</name>
			<name>
				<xsl:attribute name="type" namespace="" select="'person'"/>
				<xsl:variable name="var1078_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var1109_result" as="xs:boolean">
					<xsl:choose>
						<xsl:when test="fn:exists($var1078_resultof_map)">
							<xsl:variable name="var1079_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var1080_result" as="xs:string*">
								<xsl:for-each select="($var1079_resultof_map/node())[fn:boolean(self::text())]">
									<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="fn:exists($var1080_result)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="fn:true()"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var1110_let" as="node()?">
					<xsl:if test="$var1109_result">
						<xsl:variable name="var1081_resultof_map" as="node()*">
							<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var1108_result" as="xs:boolean">
							<xsl:choose>
								<xsl:when test="fn:exists($var1081_resultof_map)">
									<xsl:variable name="var1082_resultof_map" as="node()*">
										<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
											<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</subfield>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var1083_result" as="xs:string*">
										<xsl:for-each select="($var1082_resultof_map/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:exists($var1083_result)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="fn:true()"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="$var1108_result">
							<xsl:variable name="var1084_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var1107_result" as="xs:boolean">
								<xsl:choose>
									<xsl:when test="fn:exists($var1084_resultof_map)">
										<xsl:variable name="var1085_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1086_result" as="xs:string*">
											<xsl:for-each select="($var1085_resultof_map/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:exists($var1086_result)"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:true()"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="$var1107_result">
								<xsl:variable name="var1087_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1106_result" as="xs:boolean">
									<xsl:choose>
										<xsl:when test="fn:exists($var1087_resultof_map)">
											<xsl:variable name="var1088_resultof_map" as="node()*">
												<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
													<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</subfield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var1089_result" as="xs:string*">
												<xsl:for-each select="($var1088_resultof_map/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:exists($var1089_result)"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:true()"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:if test="$var1106_result">
									<name xmlns:dcr="http://www.isocat.org/ns/dcr">
										<xsl:variable name="var1090_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1093_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1090_resultof_map)">
													<xsl:variable name="var1091_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1092_result" as="xs:string*">
														<xsl:for-each select="($var1091_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1092_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1094_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1097_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1094_resultof_map)">
													<xsl:variable name="var1095_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1096_result" as="xs:string*">
														<xsl:for-each select="($var1095_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1096_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1098_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1101_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1098_resultof_map)">
													<xsl:variable name="var1099_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1100_result" as="xs:string*">
														<xsl:for-each select="($var1099_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1100_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var1102_resultof_map" as="node()*">
											<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1105_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($var1102_resultof_map)">
													<xsl:variable name="var1103_resultof_map" as="node()*">
														<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var1104_result" as="xs:string*">
														<xsl:for-each select="($var1103_resultof_map/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:concat(fn:concat('(', fn:string(.)), ')')"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1104_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat(fn:concat($var1093_result, $var1097_result), $var1101_result), $var1105_result)"/>
									</name>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:if>
				</xsl:variable>
				<xsl:for-each select="$var1110_let">
					<xsl:sequence select="fn:string(.)"/>
				</xsl:for-each>
			</name>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1122_function">
		<xsl:param name="par0" as="node()"/>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1113_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1113_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<name>
				<xsl:attribute name="type" namespace="" select="'org'"/>
				<xsl:variable name="var1121_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var1121_resultof_map">
					<xsl:variable name="var1120_current" as="node()" select="."/>
					<xsl:variable name="var1119_index" as="xs:integer" select="position()"/>
					<xsl:variable name="var1118_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var1118_resultof_map">
						<xsl:variable name="var1117_current" as="node()" select="."/>
						<xsl:if test="(($var1119_index = position()) and fn:exists((($var1120_current/node())[fn:boolean(self::text())])[fn:exists(($var1117_current/node())[fn:boolean(self::text())])]))">
							<xsl:variable name="var1116_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1116_resultof_map/node())[fn:boolean(self::text())]">
								<xsl:variable name="var1115_resultof_map" as="xs:string*">
									<xsl:for-each select="($var1120_current/node())[fn:boolean(self::text())]">
										<xsl:variable name="var1114_current" as="node()" select="."/>
										<xsl:for-each select="($var1117_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:concat(fn:string($var1114_current), ' / '), fn:string(.))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var1115_resultof_map return xs:string($x), ' ')), ' ['), fn:string(.)), ']')"/>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</name>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1133_function">
		<xsl:param name="par0" as="node()"/>
		<author xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1124_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1124_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<name>
				<xsl:attribute name="type" namespace="" select="'org'"/>
				<xsl:variable name="var1132_resultof_map" as="node()*">
					<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
						<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
							<xsl:sequence select="(./@node(), ./node())"/>
						</subfield>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var1132_resultof_map">
					<xsl:variable name="var1131_current" as="node()" select="."/>
					<xsl:variable name="var1130_index" as="xs:integer" select="position()"/>
					<xsl:variable name="var1129_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var1129_resultof_map">
						<xsl:variable name="var1128_current" as="node()" select="."/>
						<xsl:if test="(($var1130_index = position()) and fn:exists((($var1131_current/node())[fn:boolean(self::text())])[fn:exists(($var1128_current/node())[fn:boolean(self::text())])]))">
							<xsl:variable name="var1127_resultof_map" as="node()*">
								<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1127_resultof_map/node())[fn:boolean(self::text())]">
								<xsl:variable name="var1126_resultof_map" as="xs:string*">
									<xsl:for-each select="($var1131_current/node())[fn:boolean(self::text())]">
										<xsl:variable name="var1125_current" as="node()" select="."/>
										<xsl:for-each select="($var1128_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:concat(fn:concat(fn:string($var1125_current), ' / '), fn:string(.))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat(fn:concat(xs:string(fn:string-join(for $x in $var1126_resultof_map return xs:string($x), ' ')), ' ['), fn:string(.)), ']')"/>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</name>
		</author>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1142_function">
		<xsl:param name="par0" as="node()"/>
		<name xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:attribute name="type" namespace="" select="'person'"/>
			<xsl:sequence select="fn:string($par0)"/>
		</name>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1172_function">
		<xsl:param name="par0" as="node()"/>
		<editor xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1139_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1139_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1140_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1140_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'D')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1141_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<date>
					<xsl:sequence select="xs:string(fn:string-join(for $x in $var1141_resultof_map return xs:string($x), ' '))"/>
				</date>
			</xsl:for-each>
			<xsl:variable name="var1143_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'P')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var1143_resultof_map">
				<xsl:call-template name="agt:MapTotei_lite_var1142_function">
					<xsl:with-param name="par0" select="." as="node()"/>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:variable name="var1171_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var1171_resultof_map">
				<xsl:variable name="var1169_current" as="node()" select="."/>
				<xsl:variable name="var1170_index" as="xs:integer" select="position()"/>
				<name>
					<xsl:attribute name="type" namespace="" select="'person'"/>
					<xsl:variable name="var1144_result" as="xs:integer">
						<xsl:choose>
							<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
								<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1145_result" as="xs:integer">
						<xsl:choose>
							<xsl:when test="($var1144_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]))">
								<xsl:choose>
									<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
										<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')])"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1147_result" as="xs:integer">
						<xsl:choose>
							<xsl:when test="($var1145_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]))">
								<xsl:variable name="var1146_result" as="xs:integer">
									<xsl:choose>
										<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="($var1146_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]))">
										<xsl:choose>
											<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
												<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')])"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')])"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1149_resultof_filter" as="xs:integer*">
						<xsl:for-each select="(xs:integer(xs:decimal('1')) to $var1147_result)">
							<xsl:variable name="var1148_current" as="xs:integer" select="."/>
							<xsl:if test="fn:exists($var1169_current[(fn:position() = $var1148_current)])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var1156_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($var1149_resultof_filter)">
								<xsl:variable name="var1150_result" as="xs:integer">
									<xsl:choose>
										<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var1151_result" as="xs:integer">
									<xsl:choose>
										<xsl:when test="($var1150_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]))">
											<xsl:choose>
												<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
													<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')])"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var1153_result" as="xs:integer">
									<xsl:choose>
										<xsl:when test="($var1151_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]))">
											<xsl:variable name="var1152_result" as="xs:integer">
												<xsl:choose>
													<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
														<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="($var1152_result &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]))">
													<xsl:choose>
														<xsl:when test="(fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]) &gt;= fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]))">
															<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')])"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="fn:count((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')])"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var1155_resultof_map" as="xs:string*">
									<xsl:for-each select="(xs:integer(xs:decimal('1')) to $var1153_result)">
										<xsl:variable name="var1154_current" as="xs:integer" select="."/>
										<xsl:for-each select="$var1169_current[(fn:position() = $var1154_current)]">
											<xsl:sequence select="fn:concat(fn:string(.), ', ')"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var1155_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1157_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var1160_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($var1157_resultof_map[(fn:position() = $var1170_index)])">
								<xsl:variable name="var1158_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1159_resultof_map" as="xs:string*">
									<xsl:for-each select="$var1158_resultof_map[(fn:position() = $var1170_index)]">
										<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var1159_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1161_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var1164_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($var1161_resultof_map[(fn:position() = $var1170_index)])">
								<xsl:variable name="var1162_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1163_resultof_map" as="xs:string*">
									<xsl:for-each select="$var1162_resultof_map[(fn:position() = $var1170_index)]">
										<xsl:sequence select="fn:concat(fn:string(.), ' ')"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var1163_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="var1165_resultof_map" as="node()*">
						<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
							<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</subfield>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var1168_result" as="xs:string">
						<xsl:choose>
							<xsl:when test="fn:exists($var1165_resultof_map[(fn:position() = $var1170_index)])">
								<xsl:variable name="var1166_resultof_map" as="node()*">
									<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1167_resultof_map" as="xs:string*">
									<xsl:for-each select="$var1166_resultof_map[(fn:position() = $var1170_index)]">
										<xsl:sequence select="fn:concat(fn:concat(' ( ', fn:string(.)), ' ) ')"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var1167_resultof_map return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:sequence select="fn:concat(fn:concat(fn:concat($var1156_result, $var1160_result), $var1164_result), $var1168_result)"/>
				</name>
			</xsl:for-each>
		</editor>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1181_function">
		<xsl:param name="par0" as="node()"/>
		<publisher xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = '0')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var1179_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<ref>
					<xsl:sequence select="fn:concat('http://d-nb.info/gnd/', fn:substring-after(xs:string(fn:string-join(for $x in $var1179_resultof_map return xs:string($x), ' ')), '/'))"/>
				</ref>
			</xsl:for-each>
			<xsl:variable name="var1180_resultof_map" as="node()*">
				<xsl:for-each select="(($par0/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
					<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
						<xsl:sequence select="(./@node(), ./node())"/>
					</subfield>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var1180_resultof_map">
				<name>
					<xsl:sequence select="fn:string(.)"/>
				</name>
			</xsl:for-each>
		</publisher>
	</xsl:template>
	<xsl:template name="agt:MapTotei_lite_var1185_function">
		<xsl:param name="par0" as="node()"/>
		<extent xmlns="http://www.tei-c.org/ns/1.0">
			<xsl:for-each select="((($par0/node())[fn:boolean(self::text())])[fn:exists($par0/@code)])[(fn:string($par0/@code) = 'a')]">
				<xsl:sequence select="fn:string(.)"/>
			</xsl:for-each>
		</extent>
	</xsl:template>
	<xsl:template match="/">
		<xsl:variable name="var1_record" as="node()?" select="ns0:record"/>
		<xsl:variable name="var2_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021A')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var3_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '028B')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var4_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '033A')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var5_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '021B')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var6_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '028A')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var7_resultof_map" as="node()*">
			<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '011@')]">
				<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</datafield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var8_resultof_map" as="node()*" select="$var7_resultof_map"/>
		<xsl:variable name="var9_val" as="node()*">
			<xsl:for-each select="(($var8_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'c')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var10_resultof_map" as="node()*" select="$var7_resultof_map"/>
		<xsl:variable name="var11_val" as="node()*">
			<xsl:for-each select="(($var10_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'n')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var13_resultof_map" as="node()*" select="$var2_resultof_map"/>
		<xsl:variable name="var14_val" as="xs:string*">
			<xsl:for-each select="((($var13_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var12_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var12_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var16_resultof_map" as="node()*" select="$var2_resultof_map"/>
		<xsl:variable name="var17_val" as="xs:string*">
			<xsl:for-each select="((($var16_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var15_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var15_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var19_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var20_val" as="xs:string*">
			<xsl:for-each select="((($var19_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var18_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var18_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var22_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var23_val" as="xs:string*">
			<xsl:for-each select="((($var22_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var21_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var21_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var24_resultof_exists" as="xs:boolean" select="fn:exists($var17_val)"/>
		<xsl:variable name="var25_resultof_exists" as="xs:boolean" select="fn:exists($var14_val)"/>
		<xsl:variable name="var27_resultof_map" as="node()*" select="$var5_resultof_map"/>
		<xsl:variable name="var28_result" as="xs:string*">
			<xsl:for-each select="((($var27_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var26_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var26_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var29_resultof_exists" as="xs:boolean" select="fn:exists($var28_result)"/>
		<xsl:variable name="var30_resultof_exists" as="xs:boolean" select="fn:exists($var23_val)"/>
		<xsl:variable name="var31_resultof_exists" as="xs:boolean" select="fn:exists($var20_val)"/>
		<xsl:variable name="var33_resultof_map" as="node()*" select="$var2_resultof_map"/>
		<xsl:variable name="var34_result" as="xs:string*">
			<xsl:for-each select="((($var33_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
				<xsl:variable name="var32_resultof_map" as="xs:string*">
					<xsl:for-each select="node()[fn:boolean(self::text())]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:sequence select="xs:string(fn:string-join(for $x in $var32_resultof_map return xs:string($x), ' '))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var35_resultof_exists" as="xs:boolean" select="fn:exists($var34_result)"/>
		<xsl:variable name="var36_resultof_map" as="node()*" select="$var7_resultof_map"/>
		<xsl:variable name="var37_let" as="node()*">
			<xsl:for-each select="(($var36_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
				<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
					<xsl:sequence select="(./@node(), ./node())"/>
				</subfield>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var38_resultof_exists" as="xs:boolean" select="fn:exists($var37_let)"/>
		<xsl:variable name="var71_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var30_resultof_exists">
					<xsl:variable name="var47_resultof_map" as="node()*" select="$var5_resultof_map"/>
					<xsl:variable name="var48_result" as="xs:string*">
						<xsl:for-each select="((($var47_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var46_current" as="node()" select="."/>
							<xsl:variable name="var45_resultof_map" as="node()*" select="$var5_resultof_map"/>
							<xsl:for-each select="((($var45_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var39_resultof_map" as="xs:string*">
									<xsl:for-each select="($var46_current/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var43_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var39_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var40_resultof_map" as="xs:string*">
												<xsl:for-each select="($var46_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var41_resultof_map" as="xs:string*">
												<xsl:for-each select="($var46_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var40_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var41_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var42_resultof_map" as="xs:string*">
												<xsl:for-each select="($var46_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var42_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var44_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat($var43_result, ' / '), xs:string(fn:string-join(for $x in $var44_resultof_map return xs:string($x), ' ')))"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var48_result)">
						<xsl:variable name="var57_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:variable name="var58_result" as="xs:string*">
							<xsl:for-each select="((($var57_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var56_current" as="node()" select="."/>
								<xsl:variable name="var55_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:for-each select="((($var55_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var49_resultof_map" as="xs:string*">
										<xsl:for-each select="($var56_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var53_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var49_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var50_resultof_map" as="xs:string*">
													<xsl:for-each select="($var56_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var51_resultof_map" as="xs:string*">
													<xsl:for-each select="($var56_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var50_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var51_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var52_resultof_map" as="xs:string*">
													<xsl:for-each select="($var56_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var52_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var54_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var53_result, ' / '), xs:string(fn:string-join(for $x in $var54_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var58_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="var63_resultof_map" as="node()*" select="$var5_resultof_map"/>
					<xsl:variable name="var64_result" as="xs:string*">
						<xsl:for-each select="((($var63_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var59_resultof_map" as="xs:string*">
								<xsl:for-each select="node()[fn:boolean(self::text())]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var59_resultof_map return xs:string($x), ' ')), '@')">
									<xsl:variable name="var60_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var61_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var60_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var61_resultof_map return xs:string($x), ' ')), '@'))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var62_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var62_resultof_map return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var64_result)">
						<xsl:variable name="var69_resultof_map" as="node()*" select="$var5_resultof_map"/>
						<xsl:variable name="var70_result" as="xs:string*">
							<xsl:for-each select="((($var69_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var65_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var65_resultof_map return xs:string($x), ' ')), '@')">
										<xsl:variable name="var66_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var67_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var66_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var67_resultof_map return xs:string($x), ' ')), '@'))"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var68_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var68_resultof_map return xs:string($x), ' '))"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var70_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var104_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var25_resultof_exists">
					<xsl:variable name="var80_resultof_map" as="node()*" select="$var2_resultof_map"/>
					<xsl:variable name="var81_result" as="xs:string*">
						<xsl:for-each select="((($var80_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var79_current" as="node()" select="."/>
							<xsl:variable name="var78_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<xsl:for-each select="((($var78_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var72_resultof_map" as="xs:string*">
									<xsl:for-each select="($var79_current/node())[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var76_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var72_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var73_resultof_map" as="xs:string*">
												<xsl:for-each select="($var79_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var74_resultof_map" as="xs:string*">
												<xsl:for-each select="($var79_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var73_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var74_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var75_resultof_map" as="xs:string*">
												<xsl:for-each select="($var79_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var75_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var77_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:concat(fn:concat($var76_result, ' / '), xs:string(fn:string-join(for $x in $var77_resultof_map return xs:string($x), ' ')))"/>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var81_result)">
						<xsl:variable name="var90_resultof_map" as="node()*" select="$var2_resultof_map"/>
						<xsl:variable name="var91_result" as="xs:string*">
							<xsl:for-each select="((($var90_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var89_current" as="node()" select="."/>
								<xsl:variable name="var88_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:for-each select="((($var88_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var82_resultof_map" as="xs:string*">
										<xsl:for-each select="($var89_current/node())[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var86_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var82_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var83_resultof_map" as="xs:string*">
													<xsl:for-each select="($var89_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var84_resultof_map" as="xs:string*">
													<xsl:for-each select="($var89_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var83_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var84_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var85_resultof_map" as="xs:string*">
													<xsl:for-each select="($var89_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var85_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var87_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var86_result, ' / '), xs:string(fn:string-join(for $x in $var87_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var91_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="var96_resultof_map" as="node()*" select="$var2_resultof_map"/>
					<xsl:variable name="var97_result" as="xs:string*">
						<xsl:for-each select="((($var96_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
							<xsl:variable name="var92_resultof_map" as="xs:string*">
								<xsl:for-each select="node()[fn:boolean(self::text())]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var92_resultof_map return xs:string($x), ' ')), '@')">
									<xsl:variable name="var93_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var94_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var93_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var94_resultof_map return xs:string($x), ' ')), '@'))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var95_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var95_resultof_map return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists($var97_result)">
						<xsl:variable name="var102_resultof_map" as="node()*" select="$var2_resultof_map"/>
						<xsl:variable name="var103_result" as="xs:string*">
							<xsl:for-each select="((($var102_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
								<xsl:variable name="var98_resultof_map" as="xs:string*">
									<xsl:for-each select="node()[fn:boolean(self::text())]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var98_resultof_map return xs:string($x), ' ')), '@')">
										<xsl:variable name="var99_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var100_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var99_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var100_resultof_map return xs:string($x), ' ')), '@'))"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var101_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="xs:string(fn:string-join(for $x in $var101_resultof_map return xs:string($x), ' '))"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var103_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var105_resultof_exists" as="xs:boolean" select="fn:exists($var71_val)"/>
		<xsl:variable name="var106_resultof_exists" as="xs:boolean" select="fn:exists($var104_val)"/>
		<xsl:variable name="var164_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var24_resultof_exists">
					<xsl:variable name="var147_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var106_resultof_exists">
								<xsl:variable name="var125_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var126_result" as="xs:string*">
									<xsl:for-each select="((($var125_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var123_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var25_resultof_exists">
													<xsl:variable name="var115_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var116_result" as="xs:string*">
														<xsl:for-each select="((($var115_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var114_current" as="node()" select="."/>
															<xsl:variable name="var113_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var113_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var107_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var114_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var111_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var107_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var108_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var114_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var109_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var114_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var108_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var109_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var110_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var114_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var110_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var112_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var111_result, ' / '), xs:string(fn:string-join(for $x in $var112_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var116_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var121_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var122_result" as="xs:string*">
														<xsl:for-each select="((($var121_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var117_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var117_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var118_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var119_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var118_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var119_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var120_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var120_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var122_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var124_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var123_result, ' : '), xs:string(fn:string-join(for $x in $var124_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var126_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var147_result">
						<xsl:variable name="var146_result" as="xs:string*">
							<xsl:if test="$var106_resultof_exists">
								<xsl:variable name="var145_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:for-each select="((($var145_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var143_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var25_resultof_exists">
												<xsl:variable name="var135_resultof_map" as="node()*" select="$var2_resultof_map"/>
												<xsl:variable name="var136_result" as="xs:string*">
													<xsl:for-each select="((($var135_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var134_current" as="node()" select="."/>
														<xsl:variable name="var133_resultof_map" as="node()*" select="$var2_resultof_map"/>
														<xsl:for-each select="((($var133_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var127_resultof_map" as="xs:string*">
																<xsl:for-each select="($var134_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var131_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var127_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var128_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var134_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var129_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var134_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var128_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var129_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var130_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var134_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var130_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var132_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var131_result, ' / '), xs:string(fn:string-join(for $x in $var132_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var136_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var141_resultof_map" as="node()*" select="$var2_resultof_map"/>
												<xsl:variable name="var142_result" as="xs:string*">
													<xsl:for-each select="((($var141_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var137_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var137_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var138_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var139_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var138_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var139_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var140_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var140_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var142_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var144_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var143_result, ' : '), xs:string(fn:string-join(for $x in $var144_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var146_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var106_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var25_resultof_exists">
								<xsl:variable name="var156_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var157_result" as="xs:string*">
									<xsl:for-each select="((($var156_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var155_current" as="node()" select="."/>
										<xsl:variable name="var154_resultof_map" as="node()*" select="$var2_resultof_map"/>
										<xsl:for-each select="((($var154_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var148_resultof_map" as="xs:string*">
												<xsl:for-each select="($var155_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var152_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var148_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var149_resultof_map" as="xs:string*">
															<xsl:for-each select="($var155_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var150_resultof_map" as="xs:string*">
															<xsl:for-each select="($var155_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var149_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var150_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var151_resultof_map" as="xs:string*">
															<xsl:for-each select="($var155_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var151_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var153_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var152_result, ' / '), xs:string(fn:string-join(for $x in $var153_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var157_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var162_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var163_result" as="xs:string*">
									<xsl:for-each select="((($var162_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var158_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var158_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var159_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var160_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var159_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var160_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var161_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var161_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var163_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var222_val" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var31_resultof_exists">
					<xsl:variable name="var205_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var105_resultof_exists">
								<xsl:variable name="var183_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var184_result" as="xs:string*">
									<xsl:for-each select="((($var183_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var181_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var30_resultof_exists">
													<xsl:variable name="var173_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var174_result" as="xs:string*">
														<xsl:for-each select="((($var173_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var172_current" as="node()" select="."/>
															<xsl:variable name="var171_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var171_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var165_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var172_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var169_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var165_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var166_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var172_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var167_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var172_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var166_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var167_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var168_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var172_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var168_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var170_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var169_result, ' / '), xs:string(fn:string-join(for $x in $var170_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var174_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var179_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var180_result" as="xs:string*">
														<xsl:for-each select="((($var179_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var175_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var175_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var176_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var177_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var176_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var177_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var178_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var178_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var180_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var182_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var181_result, ' : '), xs:string(fn:string-join(for $x in $var182_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var184_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var205_result">
						<xsl:variable name="var204_result" as="xs:string*">
							<xsl:if test="$var105_resultof_exists">
								<xsl:variable name="var203_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:for-each select="((($var203_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var201_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var30_resultof_exists">
												<xsl:variable name="var193_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var194_result" as="xs:string*">
													<xsl:for-each select="((($var193_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var192_current" as="node()" select="."/>
														<xsl:variable name="var191_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:for-each select="((($var191_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var185_resultof_map" as="xs:string*">
																<xsl:for-each select="($var192_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var189_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var185_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var186_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var192_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var187_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var192_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var186_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var187_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var188_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var192_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var188_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var190_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var189_result, ' / '), xs:string(fn:string-join(for $x in $var190_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var194_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var199_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var200_result" as="xs:string*">
													<xsl:for-each select="((($var199_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var195_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var195_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var196_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var197_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var196_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var197_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var198_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var198_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var200_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var202_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var201_result, ' : '), xs:string(fn:string-join(for $x in $var202_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var204_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var105_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var30_resultof_exists">
								<xsl:variable name="var214_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var215_result" as="xs:string*">
									<xsl:for-each select="((($var214_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var213_current" as="node()" select="."/>
										<xsl:variable name="var212_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var212_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var206_resultof_map" as="xs:string*">
												<xsl:for-each select="($var213_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var210_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var206_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var207_resultof_map" as="xs:string*">
															<xsl:for-each select="($var213_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var208_resultof_map" as="xs:string*">
															<xsl:for-each select="($var213_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var207_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var208_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var209_resultof_map" as="xs:string*">
															<xsl:for-each select="($var213_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var209_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var211_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var210_result, ' / '), xs:string(fn:string-join(for $x in $var211_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var215_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var220_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var221_result" as="xs:string*">
									<xsl:for-each select="((($var220_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var216_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var216_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var217_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var218_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var217_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var218_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var219_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var219_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var221_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var223_resultof_exists" as="xs:boolean" select="fn:exists($var164_val)"/>
		<xsl:variable name="var224_resultof_exists" as="xs:boolean" select="fn:exists($var222_val)"/>
		<xsl:variable name="var342_result" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var35_resultof_exists">
					<xsl:variable name="var305_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var223_resultof_exists">
								<xsl:variable name="var263_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var264_result" as="xs:string*">
									<xsl:for-each select="((($var263_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var261_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var24_resultof_exists">
													<xsl:variable name="var244_result" as="xs:string*">
														<xsl:if test="$var106_resultof_exists">
															<xsl:variable name="var243_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var243_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var241_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var25_resultof_exists">
																			<xsl:variable name="var233_resultof_map" as="node()*" select="$var2_resultof_map"/>
																			<xsl:variable name="var234_result" as="xs:string*">
																				<xsl:for-each select="((($var233_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var232_current" as="node()" select="."/>
																					<xsl:variable name="var231_resultof_map" as="node()*" select="$var2_resultof_map"/>
																					<xsl:for-each select="((($var231_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var225_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var232_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var229_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var225_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var226_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var232_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var227_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var232_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var226_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var227_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var228_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var232_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var228_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var230_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var229_result, ' / '), xs:string(fn:string-join(for $x in $var230_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var234_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var239_resultof_map" as="node()*" select="$var2_resultof_map"/>
																			<xsl:variable name="var240_result" as="xs:string*">
																				<xsl:for-each select="((($var239_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var235_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var235_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var236_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var237_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var236_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var237_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var238_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var238_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var240_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var242_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var241_result, ' : '), xs:string(fn:string-join(for $x in $var242_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var244_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var25_resultof_exists">
													<xsl:variable name="var253_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var254_result" as="xs:string*">
														<xsl:for-each select="((($var253_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var252_current" as="node()" select="."/>
															<xsl:variable name="var251_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var251_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var245_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var252_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var249_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var245_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var246_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var252_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var247_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var252_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var246_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var247_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var248_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var252_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var248_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var250_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var249_result, ' / '), xs:string(fn:string-join(for $x in $var250_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var254_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var259_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var260_result" as="xs:string*">
														<xsl:for-each select="((($var259_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var255_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var255_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var256_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var257_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var256_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var257_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var258_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var258_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var260_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var262_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var261_result, ' = '), xs:string(fn:string-join(for $x in $var262_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var264_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var305_result">
						<xsl:variable name="var304_result" as="xs:string*">
							<xsl:if test="$var223_resultof_exists">
								<xsl:variable name="var303_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:for-each select="((($var303_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var301_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var24_resultof_exists">
												<xsl:variable name="var284_result" as="xs:string*">
													<xsl:if test="$var106_resultof_exists">
														<xsl:variable name="var283_resultof_map" as="node()*" select="$var2_resultof_map"/>
														<xsl:for-each select="((($var283_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var281_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var25_resultof_exists">
																		<xsl:variable name="var273_resultof_map" as="node()*" select="$var2_resultof_map"/>
																		<xsl:variable name="var274_result" as="xs:string*">
																			<xsl:for-each select="((($var273_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var272_current" as="node()" select="."/>
																				<xsl:variable name="var271_resultof_map" as="node()*" select="$var2_resultof_map"/>
																				<xsl:for-each select="((($var271_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var265_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var272_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var269_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var265_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var266_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var272_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var267_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var272_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var266_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var267_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var268_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var272_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var268_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var270_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var269_result, ' / '), xs:string(fn:string-join(for $x in $var270_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var274_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var279_resultof_map" as="node()*" select="$var2_resultof_map"/>
																		<xsl:variable name="var280_result" as="xs:string*">
																			<xsl:for-each select="((($var279_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var275_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var275_resultof_map return xs:string($x), ' ')), '@')">
																						<xsl:variable name="var276_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var277_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var276_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var277_resultof_map return xs:string($x), ' ')), '@'))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:variable name="var278_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="xs:string(fn:string-join(for $x in $var278_resultof_map return xs:string($x), ' '))"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var280_result return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var282_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var281_result, ' : '), xs:string(fn:string-join(for $x in $var282_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var284_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:when test="$var25_resultof_exists">
												<xsl:variable name="var293_resultof_map" as="node()*" select="$var2_resultof_map"/>
												<xsl:variable name="var294_result" as="xs:string*">
													<xsl:for-each select="((($var293_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var292_current" as="node()" select="."/>
														<xsl:variable name="var291_resultof_map" as="node()*" select="$var2_resultof_map"/>
														<xsl:for-each select="((($var291_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var285_resultof_map" as="xs:string*">
																<xsl:for-each select="($var292_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var289_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var285_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var286_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var292_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var287_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var292_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var286_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var287_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var288_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var292_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var288_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var290_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var289_result, ' / '), xs:string(fn:string-join(for $x in $var290_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var294_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var299_resultof_map" as="node()*" select="$var2_resultof_map"/>
												<xsl:variable name="var300_result" as="xs:string*">
													<xsl:for-each select="((($var299_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var295_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var295_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var296_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var297_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var296_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var297_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var298_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var298_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var300_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var302_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var301_result, ' = '), xs:string(fn:string-join(for $x in $var302_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var304_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var223_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var24_resultof_exists">
								<xsl:variable name="var325_result" as="xs:string*">
									<xsl:if test="$var106_resultof_exists">
										<xsl:variable name="var324_resultof_map" as="node()*" select="$var2_resultof_map"/>
										<xsl:for-each select="((($var324_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var322_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var25_resultof_exists">
														<xsl:variable name="var314_resultof_map" as="node()*" select="$var2_resultof_map"/>
														<xsl:variable name="var315_result" as="xs:string*">
															<xsl:for-each select="((($var314_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var313_current" as="node()" select="."/>
																<xsl:variable name="var312_resultof_map" as="node()*" select="$var2_resultof_map"/>
																<xsl:for-each select="((($var312_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var306_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var313_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var310_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var306_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var307_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var313_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var308_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var313_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var307_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var308_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var309_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var313_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var309_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var311_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var310_result, ' / '), xs:string(fn:string-join(for $x in $var311_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var315_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var320_resultof_map" as="node()*" select="$var2_resultof_map"/>
														<xsl:variable name="var321_result" as="xs:string*">
															<xsl:for-each select="((($var320_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var316_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var316_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var317_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var318_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var317_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var318_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var319_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var319_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var321_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var323_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var322_result, ' : '), xs:string(fn:string-join(for $x in $var323_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var325_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var25_resultof_exists">
								<xsl:variable name="var334_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var335_result" as="xs:string*">
									<xsl:for-each select="((($var334_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var333_current" as="node()" select="."/>
										<xsl:variable name="var332_resultof_map" as="node()*" select="$var2_resultof_map"/>
										<xsl:for-each select="((($var332_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var326_resultof_map" as="xs:string*">
												<xsl:for-each select="($var333_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var330_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var326_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var327_resultof_map" as="xs:string*">
															<xsl:for-each select="($var333_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var328_resultof_map" as="xs:string*">
															<xsl:for-each select="($var333_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var327_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var328_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var329_resultof_map" as="xs:string*">
															<xsl:for-each select="($var333_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var329_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var331_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var330_result, ' / '), xs:string(fn:string-join(for $x in $var331_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var335_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var340_resultof_map" as="node()*" select="$var2_resultof_map"/>
								<xsl:variable name="var341_result" as="xs:string*">
									<xsl:for-each select="((($var340_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var336_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var336_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var337_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var338_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var337_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var338_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var339_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var339_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var341_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var343_resultof_exists" as="xs:boolean" select="fn:exists($var342_result)"/>
		<xsl:variable name="var461_result" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var29_resultof_exists">
					<xsl:variable name="var424_result" as="xs:boolean">
						<xsl:choose>
							<xsl:when test="$var224_resultof_exists">
								<xsl:variable name="var382_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var383_result" as="xs:string*">
									<xsl:for-each select="((($var382_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var380_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var31_resultof_exists">
													<xsl:variable name="var363_result" as="xs:string*">
														<xsl:if test="$var105_resultof_exists">
															<xsl:variable name="var362_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var362_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var360_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var30_resultof_exists">
																			<xsl:variable name="var352_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var353_result" as="xs:string*">
																				<xsl:for-each select="((($var352_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var351_current" as="node()" select="."/>
																					<xsl:variable name="var350_resultof_map" as="node()*" select="$var5_resultof_map"/>
																					<xsl:for-each select="((($var350_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var344_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var351_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var348_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var344_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var345_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var351_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var346_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var351_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var345_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var346_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var347_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var351_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var347_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var349_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var348_result, ' / '), xs:string(fn:string-join(for $x in $var349_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var353_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var358_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var359_result" as="xs:string*">
																				<xsl:for-each select="((($var358_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var354_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var354_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var355_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var356_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var355_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var356_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var357_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var357_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var359_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var361_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var360_result, ' : '), xs:string(fn:string-join(for $x in $var361_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var363_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var30_resultof_exists">
													<xsl:variable name="var372_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var373_result" as="xs:string*">
														<xsl:for-each select="((($var372_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var371_current" as="node()" select="."/>
															<xsl:variable name="var370_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var370_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var364_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var371_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var368_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var364_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var365_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var371_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var366_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var371_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var365_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var366_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var367_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var371_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var367_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var369_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var368_result, ' / '), xs:string(fn:string-join(for $x in $var369_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var373_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var378_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var379_result" as="xs:string*">
														<xsl:for-each select="((($var378_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var374_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var374_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var375_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var376_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var375_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var376_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var377_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var377_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var379_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var381_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var380_result, ' = '), xs:string(fn:string-join(for $x in $var381_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var383_result)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:false()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="$var424_result">
						<xsl:variable name="var423_result" as="xs:string*">
							<xsl:if test="$var224_resultof_exists">
								<xsl:variable name="var422_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:for-each select="((($var422_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var420_result" as="xs:string">
										<xsl:choose>
											<xsl:when test="$var31_resultof_exists">
												<xsl:variable name="var403_result" as="xs:string*">
													<xsl:if test="$var105_resultof_exists">
														<xsl:variable name="var402_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:for-each select="((($var402_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var400_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="$var30_resultof_exists">
																		<xsl:variable name="var392_resultof_map" as="node()*" select="$var5_resultof_map"/>
																		<xsl:variable name="var393_result" as="xs:string*">
																			<xsl:for-each select="((($var392_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var391_current" as="node()" select="."/>
																				<xsl:variable name="var390_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:for-each select="((($var390_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var384_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var391_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var388_result" as="xs:string">
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var384_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var385_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var391_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var386_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var391_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var385_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var386_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var387_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var391_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var387_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:variable>
																					<xsl:variable name="var389_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:concat($var388_result, ' / '), xs:string(fn:string-join(for $x in $var389_resultof_map return xs:string($x), ' ')))"/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var393_result return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var398_resultof_map" as="node()*" select="$var5_resultof_map"/>
																		<xsl:variable name="var399_result" as="xs:string*">
																			<xsl:for-each select="((($var398_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																				<xsl:variable name="var394_resultof_map" as="xs:string*">
																					<xsl:for-each select="node()[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var394_resultof_map return xs:string($x), ' ')), '@')">
																						<xsl:variable name="var395_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var396_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var395_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var396_resultof_map return xs:string($x), ' ')), '@'))"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<xsl:variable name="var397_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="xs:string(fn:string-join(for $x in $var397_resultof_map return xs:string($x), ' '))"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var399_result return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var401_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var400_result, ' : '), xs:string(fn:string-join(for $x in $var401_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var403_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:when test="$var30_resultof_exists">
												<xsl:variable name="var412_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var413_result" as="xs:string*">
													<xsl:for-each select="((($var412_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var411_current" as="node()" select="."/>
														<xsl:variable name="var410_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:for-each select="((($var410_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var404_resultof_map" as="xs:string*">
																<xsl:for-each select="($var411_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var408_result" as="xs:string">
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var404_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var405_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var411_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var406_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var411_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var405_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var406_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var407_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var411_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var407_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:variable>
															<xsl:variable name="var409_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:concat($var408_result, ' / '), xs:string(fn:string-join(for $x in $var409_resultof_map return xs:string($x), ' ')))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var413_result return xs:string($x), ' '))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var418_resultof_map" as="node()*" select="$var5_resultof_map"/>
												<xsl:variable name="var419_result" as="xs:string*">
													<xsl:for-each select="((($var418_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
														<xsl:variable name="var414_resultof_map" as="xs:string*">
															<xsl:for-each select="node()[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var414_resultof_map return xs:string($x), ' ')), '@')">
																<xsl:variable name="var415_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var416_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var415_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var416_resultof_map return xs:string($x), ' ')), '@'))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var417_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var417_resultof_map return xs:string($x), ' '))"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var419_result return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var421_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="fn:concat(fn:concat($var420_result, ' = '), xs:string(fn:string-join(for $x in $var421_resultof_map return xs:string($x), ' ')))"/>
								</xsl:for-each>
							</xsl:if>
						</xsl:variable>
						<xsl:sequence select="xs:string(fn:string-join(for $x in $var423_result return xs:string($x), ' '))"/>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var224_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var31_resultof_exists">
								<xsl:variable name="var444_result" as="xs:string*">
									<xsl:if test="$var105_resultof_exists">
										<xsl:variable name="var443_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var443_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var441_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var30_resultof_exists">
														<xsl:variable name="var433_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var434_result" as="xs:string*">
															<xsl:for-each select="((($var433_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var432_current" as="node()" select="."/>
																<xsl:variable name="var431_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var431_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var425_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var432_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var429_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var425_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var426_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var432_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var427_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var432_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var426_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var427_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var428_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var432_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var428_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var430_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var429_result, ' / '), xs:string(fn:string-join(for $x in $var430_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var434_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var439_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var440_result" as="xs:string*">
															<xsl:for-each select="((($var439_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var435_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var435_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var436_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var437_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var436_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var437_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var438_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var438_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var440_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var442_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var441_result, ' : '), xs:string(fn:string-join(for $x in $var442_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var444_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var30_resultof_exists">
								<xsl:variable name="var453_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var454_result" as="xs:string*">
									<xsl:for-each select="((($var453_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var452_current" as="node()" select="."/>
										<xsl:variable name="var451_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var451_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var445_resultof_map" as="xs:string*">
												<xsl:for-each select="($var452_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var449_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var445_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var446_resultof_map" as="xs:string*">
															<xsl:for-each select="($var452_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var447_resultof_map" as="xs:string*">
															<xsl:for-each select="($var452_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var446_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var447_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var448_resultof_map" as="xs:string*">
															<xsl:for-each select="($var452_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var448_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var450_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var449_result, ' / '), xs:string(fn:string-join(for $x in $var450_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var454_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var459_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var460_result" as="xs:string*">
									<xsl:for-each select="((($var459_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var455_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var455_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var456_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var457_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var456_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var457_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var458_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var458_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var460_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var462_resultof_exists" as="xs:boolean" select="fn:exists($var461_result)"/>
		<xsl:variable name="var463_resultof_logical_and" as="xs:boolean" select="($var343_resultof_exists and $var462_resultof_exists)"/>
		<xsl:variable name="var692_result" as="xs:string?">
			<xsl:choose>
				<xsl:when test="$var463_resultof_logical_and">
					<xsl:if test="$var462_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var29_resultof_exists">
								<xsl:variable name="var503_result" as="xs:string*">
									<xsl:if test="$var224_resultof_exists">
										<xsl:variable name="var502_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var502_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var500_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var31_resultof_exists">
														<xsl:variable name="var483_result" as="xs:string*">
															<xsl:if test="$var105_resultof_exists">
																<xsl:variable name="var482_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var482_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var480_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="$var30_resultof_exists">
																				<xsl:variable name="var472_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:variable name="var473_result" as="xs:string*">
																					<xsl:for-each select="((($var472_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var471_current" as="node()" select="."/>
																						<xsl:variable name="var470_resultof_map" as="node()*" select="$var5_resultof_map"/>
																						<xsl:for-each select="((($var470_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var464_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var471_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var468_result" as="xs:string">
																								<xsl:choose>
																									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var464_resultof_map return xs:string($x), ' ')), '@')">
																										<xsl:variable name="var465_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var471_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var466_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var471_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var465_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var466_resultof_map return xs:string($x), ' ')), '@'))"/>
																									</xsl:when>
																									<xsl:otherwise>
																										<xsl:variable name="var467_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var471_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="xs:string(fn:string-join(for $x in $var467_resultof_map return xs:string($x), ' '))"/>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:variable>
																							<xsl:variable name="var469_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:concat($var468_result, ' / '), xs:string(fn:string-join(for $x in $var469_resultof_map return xs:string($x), ' ')))"/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var473_result return xs:string($x), ' '))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var478_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:variable name="var479_result" as="xs:string*">
																					<xsl:for-each select="((($var478_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var474_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var474_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var475_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var476_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var475_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var476_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var477_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var477_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var479_result return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var481_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var480_result, ' : '), xs:string(fn:string-join(for $x in $var481_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:if>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var483_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:when test="$var30_resultof_exists">
														<xsl:variable name="var492_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var493_result" as="xs:string*">
															<xsl:for-each select="((($var492_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var491_current" as="node()" select="."/>
																<xsl:variable name="var490_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var490_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var484_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var491_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var488_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var484_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var485_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var491_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var486_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var491_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var485_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var486_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var487_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var491_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var487_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var489_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var488_result, ' / '), xs:string(fn:string-join(for $x in $var489_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var493_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var498_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var499_result" as="xs:string*">
															<xsl:for-each select="((($var498_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var494_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var494_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var495_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var496_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var495_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var496_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var497_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var497_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var499_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var501_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var500_result, ' = '), xs:string(fn:string-join(for $x in $var501_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var503_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var31_resultof_exists">
								<xsl:variable name="var523_result" as="xs:string*">
									<xsl:if test="$var105_resultof_exists">
										<xsl:variable name="var522_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var522_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var520_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var30_resultof_exists">
														<xsl:variable name="var512_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var513_result" as="xs:string*">
															<xsl:for-each select="((($var512_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var511_current" as="node()" select="."/>
																<xsl:variable name="var510_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var510_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var504_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var511_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var508_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var504_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var505_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var511_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var506_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var511_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var505_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var506_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var507_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var511_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var507_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var509_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var508_result, ' / '), xs:string(fn:string-join(for $x in $var509_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var513_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var518_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var519_result" as="xs:string*">
															<xsl:for-each select="((($var518_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var514_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var514_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var515_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var516_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var515_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var516_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var517_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var517_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var519_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var521_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var520_result, ' : '), xs:string(fn:string-join(for $x in $var521_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var523_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var30_resultof_exists">
								<xsl:variable name="var532_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var533_result" as="xs:string*">
									<xsl:for-each select="((($var532_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var531_current" as="node()" select="."/>
										<xsl:variable name="var530_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var530_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var524_resultof_map" as="xs:string*">
												<xsl:for-each select="($var531_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var528_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var524_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var525_resultof_map" as="xs:string*">
															<xsl:for-each select="($var531_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var526_resultof_map" as="xs:string*">
															<xsl:for-each select="($var531_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var525_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var526_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var527_resultof_map" as="xs:string*">
															<xsl:for-each select="($var531_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var527_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var529_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var528_result, ' / '), xs:string(fn:string-join(for $x in $var529_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var533_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var538_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var539_result" as="xs:string*">
									<xsl:for-each select="((($var538_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var534_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var534_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var535_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var536_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var535_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var536_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var537_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var537_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var539_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:when>
				<xsl:when test="$var343_resultof_exists">
					<xsl:choose>
						<xsl:when test="$var35_resultof_exists">
							<xsl:variable name="var579_result" as="xs:string*">
								<xsl:if test="$var223_resultof_exists">
									<xsl:variable name="var578_resultof_map" as="node()*" select="$var2_resultof_map"/>
									<xsl:for-each select="((($var578_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var576_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var24_resultof_exists">
													<xsl:variable name="var559_result" as="xs:string*">
														<xsl:if test="$var106_resultof_exists">
															<xsl:variable name="var558_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var558_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var556_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var25_resultof_exists">
																			<xsl:variable name="var548_resultof_map" as="node()*" select="$var2_resultof_map"/>
																			<xsl:variable name="var549_result" as="xs:string*">
																				<xsl:for-each select="((($var548_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var547_current" as="node()" select="."/>
																					<xsl:variable name="var546_resultof_map" as="node()*" select="$var2_resultof_map"/>
																					<xsl:for-each select="((($var546_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var540_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var547_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var544_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var540_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var541_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var547_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var542_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var547_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var541_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var542_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var543_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var547_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var543_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var545_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var544_result, ' / '), xs:string(fn:string-join(for $x in $var545_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var549_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var554_resultof_map" as="node()*" select="$var2_resultof_map"/>
																			<xsl:variable name="var555_result" as="xs:string*">
																				<xsl:for-each select="((($var554_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var550_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var550_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var551_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var552_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var551_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var552_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var553_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var553_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var555_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var557_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var556_result, ' : '), xs:string(fn:string-join(for $x in $var557_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var559_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var25_resultof_exists">
													<xsl:variable name="var568_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var569_result" as="xs:string*">
														<xsl:for-each select="((($var568_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var567_current" as="node()" select="."/>
															<xsl:variable name="var566_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var566_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var560_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var567_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var564_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var560_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var561_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var567_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var562_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var567_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var561_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var562_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var563_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var567_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var563_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var565_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var564_result, ' / '), xs:string(fn:string-join(for $x in $var565_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var569_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var574_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var575_result" as="xs:string*">
														<xsl:for-each select="((($var574_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var570_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var570_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var571_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var572_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var571_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var572_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var573_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var573_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var575_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var577_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var576_result, ' = '), xs:string(fn:string-join(for $x in $var577_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var579_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:when test="$var24_resultof_exists">
							<xsl:variable name="var599_result" as="xs:string*">
								<xsl:if test="$var106_resultof_exists">
									<xsl:variable name="var598_resultof_map" as="node()*" select="$var2_resultof_map"/>
									<xsl:for-each select="((($var598_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var596_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var25_resultof_exists">
													<xsl:variable name="var588_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var589_result" as="xs:string*">
														<xsl:for-each select="((($var588_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var587_current" as="node()" select="."/>
															<xsl:variable name="var586_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:for-each select="((($var586_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var580_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var587_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var584_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var580_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var581_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var587_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var582_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var587_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var581_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var582_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var583_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var587_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var583_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var585_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var584_result, ' / '), xs:string(fn:string-join(for $x in $var585_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var589_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var594_resultof_map" as="node()*" select="$var2_resultof_map"/>
													<xsl:variable name="var595_result" as="xs:string*">
														<xsl:for-each select="((($var594_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var590_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var590_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var591_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var592_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var591_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var592_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var593_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var593_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var595_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var597_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var596_result, ' : '), xs:string(fn:string-join(for $x in $var597_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var599_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:when test="$var25_resultof_exists">
							<xsl:variable name="var608_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<xsl:variable name="var609_result" as="xs:string*">
								<xsl:for-each select="((($var608_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var607_current" as="node()" select="."/>
									<xsl:variable name="var606_resultof_map" as="node()*" select="$var2_resultof_map"/>
									<xsl:for-each select="((($var606_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var600_resultof_map" as="xs:string*">
											<xsl:for-each select="($var607_current/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var604_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var600_resultof_map return xs:string($x), ' ')), '@')">
													<xsl:variable name="var601_resultof_map" as="xs:string*">
														<xsl:for-each select="($var607_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var602_resultof_map" as="xs:string*">
														<xsl:for-each select="($var607_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var601_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var602_resultof_map return xs:string($x), ' ')), '@'))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var603_resultof_map" as="xs:string*">
														<xsl:for-each select="($var607_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var603_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var605_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var604_result, ' / '), xs:string(fn:string-join(for $x in $var605_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var609_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="var614_resultof_map" as="node()*" select="$var2_resultof_map"/>
							<xsl:variable name="var615_result" as="xs:string*">
								<xsl:for-each select="((($var614_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var610_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var610_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var611_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var612_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var611_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var612_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var613_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var613_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var615_result return xs:string($x), ' '))"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="$var462_resultof_exists">
						<xsl:choose>
							<xsl:when test="$var29_resultof_exists">
								<xsl:variable name="var655_result" as="xs:string*">
									<xsl:if test="$var224_resultof_exists">
										<xsl:variable name="var654_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var654_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var652_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var31_resultof_exists">
														<xsl:variable name="var635_result" as="xs:string*">
															<xsl:if test="$var105_resultof_exists">
																<xsl:variable name="var634_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var634_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var632_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="$var30_resultof_exists">
																				<xsl:variable name="var624_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:variable name="var625_result" as="xs:string*">
																					<xsl:for-each select="((($var624_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var623_current" as="node()" select="."/>
																						<xsl:variable name="var622_resultof_map" as="node()*" select="$var5_resultof_map"/>
																						<xsl:for-each select="((($var622_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var616_resultof_map" as="xs:string*">
																								<xsl:for-each select="($var623_current/node())[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var620_result" as="xs:string">
																								<xsl:choose>
																									<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var616_resultof_map return xs:string($x), ' ')), '@')">
																										<xsl:variable name="var617_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var623_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:variable name="var618_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var623_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var617_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var618_resultof_map return xs:string($x), ' ')), '@'))"/>
																									</xsl:when>
																									<xsl:otherwise>
																										<xsl:variable name="var619_resultof_map" as="xs:string*">
																											<xsl:for-each select="($var623_current/node())[fn:boolean(self::text())]">
																												<xsl:sequence select="fn:string(.)"/>
																											</xsl:for-each>
																										</xsl:variable>
																										<xsl:sequence select="xs:string(fn:string-join(for $x in $var619_resultof_map return xs:string($x), ' '))"/>
																									</xsl:otherwise>
																								</xsl:choose>
																							</xsl:variable>
																							<xsl:variable name="var621_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:concat($var620_result, ' / '), xs:string(fn:string-join(for $x in $var621_resultof_map return xs:string($x), ' ')))"/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var625_result return xs:string($x), ' '))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var630_resultof_map" as="node()*" select="$var5_resultof_map"/>
																				<xsl:variable name="var631_result" as="xs:string*">
																					<xsl:for-each select="((($var630_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var626_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var626_resultof_map return xs:string($x), ' ')), '@')">
																								<xsl:variable name="var627_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var628_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var627_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var628_resultof_map return xs:string($x), ' ')), '@'))"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<xsl:variable name="var629_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="xs:string(fn:string-join(for $x in $var629_resultof_map return xs:string($x), ' '))"/>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var631_result return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var633_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var632_result, ' : '), xs:string(fn:string-join(for $x in $var633_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:if>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var635_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:when test="$var30_resultof_exists">
														<xsl:variable name="var644_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var645_result" as="xs:string*">
															<xsl:for-each select="((($var644_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var643_current" as="node()" select="."/>
																<xsl:variable name="var642_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var642_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var636_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var643_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var640_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var636_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var637_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var643_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var638_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var643_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var637_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var638_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var639_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var643_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var639_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var641_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var640_result, ' / '), xs:string(fn:string-join(for $x in $var641_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var645_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var650_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var651_result" as="xs:string*">
															<xsl:for-each select="((($var650_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var646_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var646_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var647_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var648_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var647_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var648_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var649_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var649_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var651_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var653_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var652_result, ' = '), xs:string(fn:string-join(for $x in $var653_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var655_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var31_resultof_exists">
								<xsl:variable name="var675_result" as="xs:string*">
									<xsl:if test="$var105_resultof_exists">
										<xsl:variable name="var674_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var674_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var672_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="$var30_resultof_exists">
														<xsl:variable name="var664_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var665_result" as="xs:string*">
															<xsl:for-each select="((($var664_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var663_current" as="node()" select="."/>
																<xsl:variable name="var662_resultof_map" as="node()*" select="$var5_resultof_map"/>
																<xsl:for-each select="((($var662_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var656_resultof_map" as="xs:string*">
																		<xsl:for-each select="($var663_current/node())[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var660_result" as="xs:string">
																		<xsl:choose>
																			<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var656_resultof_map return xs:string($x), ' ')), '@')">
																				<xsl:variable name="var657_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var663_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:variable name="var658_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var663_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var657_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var658_resultof_map return xs:string($x), ' ')), '@'))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:variable name="var659_resultof_map" as="xs:string*">
																					<xsl:for-each select="($var663_current/node())[fn:boolean(self::text())]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</xsl:variable>
																				<xsl:sequence select="xs:string(fn:string-join(for $x in $var659_resultof_map return xs:string($x), ' '))"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:variable>
																	<xsl:variable name="var661_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:concat($var660_result, ' / '), xs:string(fn:string-join(for $x in $var661_resultof_map return xs:string($x), ' ')))"/>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var665_result return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var670_resultof_map" as="node()*" select="$var5_resultof_map"/>
														<xsl:variable name="var671_result" as="xs:string*">
															<xsl:for-each select="((($var670_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var666_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var666_resultof_map return xs:string($x), ' ')), '@')">
																		<xsl:variable name="var667_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var668_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var667_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var668_resultof_map return xs:string($x), ' ')), '@'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:variable name="var669_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var669_resultof_map return xs:string($x), ' '))"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var671_result return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var673_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var672_result, ' : '), xs:string(fn:string-join(for $x in $var673_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var675_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:when test="$var30_resultof_exists">
								<xsl:variable name="var684_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var685_result" as="xs:string*">
									<xsl:for-each select="((($var684_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var683_current" as="node()" select="."/>
										<xsl:variable name="var682_resultof_map" as="node()*" select="$var5_resultof_map"/>
										<xsl:for-each select="((($var682_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var676_resultof_map" as="xs:string*">
												<xsl:for-each select="($var683_current/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var680_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var676_resultof_map return xs:string($x), ' ')), '@')">
														<xsl:variable name="var677_resultof_map" as="xs:string*">
															<xsl:for-each select="($var683_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:variable name="var678_resultof_map" as="xs:string*">
															<xsl:for-each select="($var683_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var677_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var678_resultof_map return xs:string($x), ' ')), '@'))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var679_resultof_map" as="xs:string*">
															<xsl:for-each select="($var683_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var679_resultof_map return xs:string($x), ' '))"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:variable name="var681_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:concat($var680_result, ' / '), xs:string(fn:string-join(for $x in $var681_resultof_map return xs:string($x), ' ')))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var685_result return xs:string($x), ' '))"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="var690_resultof_map" as="node()*" select="$var5_resultof_map"/>
								<xsl:variable name="var691_result" as="xs:string*">
									<xsl:for-each select="((($var690_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var686_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var686_resultof_map return xs:string($x), ' ')), '@')">
												<xsl:variable name="var687_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var688_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var687_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var688_resultof_map return xs:string($x), ' ')), '@'))"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var689_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var689_resultof_map return xs:string($x), ' '))"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="xs:string(fn:string-join(for $x in $var691_result return xs:string($x), ' '))"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="var921_val" as="node()?">
			<xsl:if test="fn:exists($var692_result)">
				<title xmlns="http://www.tei-c.org/ns/1.0">
					<xsl:choose>
						<xsl:when test="$var463_resultof_logical_and">
							<xsl:choose>
								<xsl:when test="$var29_resultof_exists">
									<xsl:variable name="var732_result" as="xs:string*">
										<xsl:if test="$var224_resultof_exists">
											<xsl:variable name="var731_resultof_map" as="node()*" select="$var5_resultof_map"/>
											<xsl:for-each select="((($var731_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var729_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="$var31_resultof_exists">
															<xsl:variable name="var712_result" as="xs:string*">
																<xsl:if test="$var105_resultof_exists">
																	<xsl:variable name="var711_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:for-each select="((($var711_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var709_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="$var30_resultof_exists">
																					<xsl:variable name="var701_resultof_map" as="node()*" select="$var5_resultof_map"/>
																					<xsl:variable name="var702_result" as="xs:string*">
																						<xsl:for-each select="((($var701_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var700_current" as="node()" select="."/>
																							<xsl:variable name="var699_resultof_map" as="node()*" select="$var5_resultof_map"/>
																							<xsl:for-each select="((($var699_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																								<xsl:variable name="var693_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var700_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var697_result" as="xs:string">
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var693_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var694_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var700_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var695_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var700_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var694_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var695_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var696_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var700_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var696_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:variable>
																								<xsl:variable name="var698_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:concat($var697_result, ' / '), xs:string(fn:string-join(for $x in $var698_resultof_map return xs:string($x), ' ')))"/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var702_result return xs:string($x), ' '))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var707_resultof_map" as="node()*" select="$var5_resultof_map"/>
																					<xsl:variable name="var708_result" as="xs:string*">
																						<xsl:for-each select="((($var707_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var703_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var703_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var704_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var705_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var704_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var705_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var706_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var706_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var708_result return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var710_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var709_result, ' : '), xs:string(fn:string-join(for $x in $var710_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:if>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var712_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:when test="$var30_resultof_exists">
															<xsl:variable name="var721_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:variable name="var722_result" as="xs:string*">
																<xsl:for-each select="((($var721_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var720_current" as="node()" select="."/>
																	<xsl:variable name="var719_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:for-each select="((($var719_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var713_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var720_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var717_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var713_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var714_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var720_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var715_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var720_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var714_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var715_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var716_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var720_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var716_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var718_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var717_result, ' / '), xs:string(fn:string-join(for $x in $var718_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var722_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var727_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:variable name="var728_result" as="xs:string*">
																<xsl:for-each select="((($var727_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var723_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var723_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var724_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var725_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var724_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var725_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var726_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var726_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var728_result return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var730_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var729_result, ' = '), xs:string(fn:string-join(for $x in $var730_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:if>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var732_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:when test="$var31_resultof_exists">
									<xsl:variable name="var752_result" as="xs:string*">
										<xsl:if test="$var105_resultof_exists">
											<xsl:variable name="var751_resultof_map" as="node()*" select="$var5_resultof_map"/>
											<xsl:for-each select="((($var751_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var749_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="$var30_resultof_exists">
															<xsl:variable name="var741_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:variable name="var742_result" as="xs:string*">
																<xsl:for-each select="((($var741_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var740_current" as="node()" select="."/>
																	<xsl:variable name="var739_resultof_map" as="node()*" select="$var5_resultof_map"/>
																	<xsl:for-each select="((($var739_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var733_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var740_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var737_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var733_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var734_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var740_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var735_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var740_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var734_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var735_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var736_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var740_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var736_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var738_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var737_result, ' / '), xs:string(fn:string-join(for $x in $var738_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var742_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var747_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:variable name="var748_result" as="xs:string*">
																<xsl:for-each select="((($var747_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var743_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var743_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var744_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var745_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var744_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var745_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var746_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var746_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var748_result return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var750_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var749_result, ' : '), xs:string(fn:string-join(for $x in $var750_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:if>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var752_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:when test="$var30_resultof_exists">
									<xsl:variable name="var761_resultof_map" as="node()*" select="$var5_resultof_map"/>
									<xsl:variable name="var762_result" as="xs:string*">
										<xsl:for-each select="((($var761_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var760_current" as="node()" select="."/>
											<xsl:variable name="var759_resultof_map" as="node()*" select="$var5_resultof_map"/>
											<xsl:for-each select="((($var759_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var753_resultof_map" as="xs:string*">
													<xsl:for-each select="($var760_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var757_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var753_resultof_map return xs:string($x), ' ')), '@')">
															<xsl:variable name="var754_resultof_map" as="xs:string*">
																<xsl:for-each select="($var760_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var755_resultof_map" as="xs:string*">
																<xsl:for-each select="($var760_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var754_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var755_resultof_map return xs:string($x), ' ')), '@'))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var756_resultof_map" as="xs:string*">
																<xsl:for-each select="($var760_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var756_resultof_map return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var758_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var757_result, ' / '), xs:string(fn:string-join(for $x in $var758_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var762_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var767_resultof_map" as="node()*" select="$var5_resultof_map"/>
									<xsl:variable name="var768_result" as="xs:string*">
										<xsl:for-each select="((($var767_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var763_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var763_resultof_map return xs:string($x), ' ')), '@')">
													<xsl:variable name="var764_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var765_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var764_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var765_resultof_map return xs:string($x), ' ')), '@'))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var766_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var766_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var768_result return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:when test="$var343_resultof_exists">
							<xsl:choose>
								<xsl:when test="$var35_resultof_exists">
									<xsl:variable name="var808_result" as="xs:string*">
										<xsl:if test="$var223_resultof_exists">
											<xsl:variable name="var807_resultof_map" as="node()*" select="$var2_resultof_map"/>
											<xsl:for-each select="((($var807_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var805_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="$var24_resultof_exists">
															<xsl:variable name="var788_result" as="xs:string*">
																<xsl:if test="$var106_resultof_exists">
																	<xsl:variable name="var787_resultof_map" as="node()*" select="$var2_resultof_map"/>
																	<xsl:for-each select="((($var787_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var785_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="$var25_resultof_exists">
																					<xsl:variable name="var777_resultof_map" as="node()*" select="$var2_resultof_map"/>
																					<xsl:variable name="var778_result" as="xs:string*">
																						<xsl:for-each select="((($var777_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var776_current" as="node()" select="."/>
																							<xsl:variable name="var775_resultof_map" as="node()*" select="$var2_resultof_map"/>
																							<xsl:for-each select="((($var775_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																								<xsl:variable name="var769_resultof_map" as="xs:string*">
																									<xsl:for-each select="($var776_current/node())[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:variable name="var773_result" as="xs:string">
																									<xsl:choose>
																										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var769_resultof_map return xs:string($x), ' ')), '@')">
																											<xsl:variable name="var770_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var776_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:variable name="var771_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var776_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var770_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var771_resultof_map return xs:string($x), ' ')), '@'))"/>
																										</xsl:when>
																										<xsl:otherwise>
																											<xsl:variable name="var772_resultof_map" as="xs:string*">
																												<xsl:for-each select="($var776_current/node())[fn:boolean(self::text())]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</xsl:variable>
																											<xsl:sequence select="xs:string(fn:string-join(for $x in $var772_resultof_map return xs:string($x), ' '))"/>
																										</xsl:otherwise>
																									</xsl:choose>
																								</xsl:variable>
																								<xsl:variable name="var774_resultof_map" as="xs:string*">
																									<xsl:for-each select="node()[fn:boolean(self::text())]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</xsl:variable>
																								<xsl:sequence select="fn:concat(fn:concat($var773_result, ' / '), xs:string(fn:string-join(for $x in $var774_resultof_map return xs:string($x), ' ')))"/>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var778_result return xs:string($x), ' '))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var783_resultof_map" as="node()*" select="$var2_resultof_map"/>
																					<xsl:variable name="var784_result" as="xs:string*">
																						<xsl:for-each select="((($var783_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																							<xsl:variable name="var779_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var779_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var780_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var781_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var780_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var781_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var782_resultof_map" as="xs:string*">
																										<xsl:for-each select="node()[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var782_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var784_result return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var786_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var785_result, ' : '), xs:string(fn:string-join(for $x in $var786_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:if>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var788_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:when test="$var25_resultof_exists">
															<xsl:variable name="var797_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:variable name="var798_result" as="xs:string*">
																<xsl:for-each select="((($var797_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var796_current" as="node()" select="."/>
																	<xsl:variable name="var795_resultof_map" as="node()*" select="$var2_resultof_map"/>
																	<xsl:for-each select="((($var795_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var789_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var796_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var793_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var789_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var790_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var796_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var791_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var796_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var790_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var791_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var792_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var796_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var792_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var794_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var793_result, ' / '), xs:string(fn:string-join(for $x in $var794_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var798_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var803_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:variable name="var804_result" as="xs:string*">
																<xsl:for-each select="((($var803_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var799_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var799_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var800_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var801_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var800_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var801_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var802_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var802_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var804_result return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var806_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var805_result, ' = '), xs:string(fn:string-join(for $x in $var806_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:if>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var808_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:when test="$var24_resultof_exists">
									<xsl:variable name="var828_result" as="xs:string*">
										<xsl:if test="$var106_resultof_exists">
											<xsl:variable name="var827_resultof_map" as="node()*" select="$var2_resultof_map"/>
											<xsl:for-each select="((($var827_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var825_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="$var25_resultof_exists">
															<xsl:variable name="var817_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:variable name="var818_result" as="xs:string*">
																<xsl:for-each select="((($var817_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var816_current" as="node()" select="."/>
																	<xsl:variable name="var815_resultof_map" as="node()*" select="$var2_resultof_map"/>
																	<xsl:for-each select="((($var815_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																		<xsl:variable name="var809_resultof_map" as="xs:string*">
																			<xsl:for-each select="($var816_current/node())[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="var813_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var809_resultof_map return xs:string($x), ' ')), '@')">
																					<xsl:variable name="var810_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var816_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:variable name="var811_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var816_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var810_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var811_resultof_map return xs:string($x), ' ')), '@'))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var812_resultof_map" as="xs:string*">
																						<xsl:for-each select="($var816_current/node())[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var812_resultof_map return xs:string($x), ' '))"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var814_resultof_map" as="xs:string*">
																			<xsl:for-each select="node()[fn:boolean(self::text())]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="fn:concat(fn:concat($var813_result, ' / '), xs:string(fn:string-join(for $x in $var814_resultof_map return xs:string($x), ' ')))"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var818_result return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var823_resultof_map" as="node()*" select="$var2_resultof_map"/>
															<xsl:variable name="var824_result" as="xs:string*">
																<xsl:for-each select="((($var823_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																	<xsl:variable name="var819_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var819_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var820_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var821_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var820_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var821_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var822_resultof_map" as="xs:string*">
																				<xsl:for-each select="node()[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var822_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var824_result return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var826_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var825_result, ' : '), xs:string(fn:string-join(for $x in $var826_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:if>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var828_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:when test="$var25_resultof_exists">
									<xsl:variable name="var837_resultof_map" as="node()*" select="$var2_resultof_map"/>
									<xsl:variable name="var838_result" as="xs:string*">
										<xsl:for-each select="((($var837_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var836_current" as="node()" select="."/>
											<xsl:variable name="var835_resultof_map" as="node()*" select="$var2_resultof_map"/>
											<xsl:for-each select="((($var835_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
												<xsl:variable name="var829_resultof_map" as="xs:string*">
													<xsl:for-each select="($var836_current/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var833_result" as="xs:string">
													<xsl:choose>
														<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var829_resultof_map return xs:string($x), ' ')), '@')">
															<xsl:variable name="var830_resultof_map" as="xs:string*">
																<xsl:for-each select="($var836_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:variable name="var831_resultof_map" as="xs:string*">
																<xsl:for-each select="($var836_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var830_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var831_resultof_map return xs:string($x), ' ')), '@'))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:variable name="var832_resultof_map" as="xs:string*">
																<xsl:for-each select="($var836_current/node())[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var832_resultof_map return xs:string($x), ' '))"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:variable name="var834_resultof_map" as="xs:string*">
													<xsl:for-each select="node()[fn:boolean(self::text())]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var833_result, ' / '), xs:string(fn:string-join(for $x in $var834_resultof_map return xs:string($x), ' ')))"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var838_result return xs:string($x), ' '))"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="var843_resultof_map" as="node()*" select="$var2_resultof_map"/>
									<xsl:variable name="var844_result" as="xs:string*">
										<xsl:for-each select="((($var843_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
											<xsl:variable name="var839_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var839_resultof_map return xs:string($x), ' ')), '@')">
													<xsl:variable name="var840_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var841_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var840_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var841_resultof_map return xs:string($x), ' ')), '@'))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var842_resultof_map" as="xs:string*">
														<xsl:for-each select="node()[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var842_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var844_result return xs:string($x), ' '))"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:when test="$var29_resultof_exists">
							<xsl:variable name="var884_result" as="xs:string*">
								<xsl:if test="$var224_resultof_exists">
									<xsl:variable name="var883_resultof_map" as="node()*" select="$var5_resultof_map"/>
									<xsl:for-each select="((($var883_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'f')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var881_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var31_resultof_exists">
													<xsl:variable name="var864_result" as="xs:string*">
														<xsl:if test="$var105_resultof_exists">
															<xsl:variable name="var863_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var863_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var861_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="$var30_resultof_exists">
																			<xsl:variable name="var853_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var854_result" as="xs:string*">
																				<xsl:for-each select="((($var853_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var852_current" as="node()" select="."/>
																					<xsl:variable name="var851_resultof_map" as="node()*" select="$var5_resultof_map"/>
																					<xsl:for-each select="((($var851_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																						<xsl:variable name="var845_resultof_map" as="xs:string*">
																							<xsl:for-each select="($var852_current/node())[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:variable name="var849_result" as="xs:string">
																							<xsl:choose>
																								<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var845_resultof_map return xs:string($x), ' ')), '@')">
																									<xsl:variable name="var846_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var852_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:variable name="var847_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var852_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var846_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var847_resultof_map return xs:string($x), ' ')), '@'))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:variable name="var848_resultof_map" as="xs:string*">
																										<xsl:for-each select="($var852_current/node())[fn:boolean(self::text())]">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:for-each>
																									</xsl:variable>
																									<xsl:sequence select="xs:string(fn:string-join(for $x in $var848_resultof_map return xs:string($x), ' '))"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:variable>
																						<xsl:variable name="var850_resultof_map" as="xs:string*">
																							<xsl:for-each select="node()[fn:boolean(self::text())]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</xsl:variable>
																						<xsl:sequence select="fn:concat(fn:concat($var849_result, ' / '), xs:string(fn:string-join(for $x in $var850_resultof_map return xs:string($x), ' ')))"/>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var854_result return xs:string($x), ' '))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var859_resultof_map" as="node()*" select="$var5_resultof_map"/>
																			<xsl:variable name="var860_result" as="xs:string*">
																				<xsl:for-each select="((($var859_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
																					<xsl:variable name="var855_resultof_map" as="xs:string*">
																						<xsl:for-each select="node()[fn:boolean(self::text())]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var855_resultof_map return xs:string($x), ' ')), '@')">
																							<xsl:variable name="var856_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:variable name="var857_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var856_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var857_resultof_map return xs:string($x), ' ')), '@'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:variable name="var858_resultof_map" as="xs:string*">
																								<xsl:for-each select="node()[fn:boolean(self::text())]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:sequence select="xs:string(fn:string-join(for $x in $var858_resultof_map return xs:string($x), ' '))"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var860_result return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var862_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var861_result, ' : '), xs:string(fn:string-join(for $x in $var862_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:if>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var864_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:when test="$var30_resultof_exists">
													<xsl:variable name="var873_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var874_result" as="xs:string*">
														<xsl:for-each select="((($var873_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var872_current" as="node()" select="."/>
															<xsl:variable name="var871_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var871_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var865_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var872_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var869_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var865_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var866_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var872_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var867_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var872_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var866_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var867_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var868_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var872_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var868_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var870_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var869_result, ' / '), xs:string(fn:string-join(for $x in $var870_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var874_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var879_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var880_result" as="xs:string*">
														<xsl:for-each select="((($var879_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var875_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var875_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var876_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var877_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var876_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var877_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var878_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var878_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var880_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var882_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var881_result, ' = '), xs:string(fn:string-join(for $x in $var882_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var884_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:when test="$var31_resultof_exists">
							<xsl:variable name="var904_result" as="xs:string*">
								<xsl:if test="$var105_resultof_exists">
									<xsl:variable name="var903_resultof_map" as="node()*" select="$var5_resultof_map"/>
									<xsl:for-each select="((($var903_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var901_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="$var30_resultof_exists">
													<xsl:variable name="var893_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var894_result" as="xs:string*">
														<xsl:for-each select="((($var893_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var892_current" as="node()" select="."/>
															<xsl:variable name="var891_resultof_map" as="node()*" select="$var5_resultof_map"/>
															<xsl:for-each select="((($var891_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
																<xsl:variable name="var885_resultof_map" as="xs:string*">
																	<xsl:for-each select="($var892_current/node())[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:variable name="var889_result" as="xs:string">
																	<xsl:choose>
																		<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var885_resultof_map return xs:string($x), ' ')), '@')">
																			<xsl:variable name="var886_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var892_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:variable name="var887_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var892_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var886_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var887_resultof_map return xs:string($x), ' ')), '@'))"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:variable name="var888_resultof_map" as="xs:string*">
																				<xsl:for-each select="($var892_current/node())[fn:boolean(self::text())]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</xsl:variable>
																			<xsl:sequence select="xs:string(fn:string-join(for $x in $var888_resultof_map return xs:string($x), ' '))"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:variable>
																<xsl:variable name="var890_resultof_map" as="xs:string*">
																	<xsl:for-each select="node()[fn:boolean(self::text())]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="fn:concat(fn:concat($var889_result, ' / '), xs:string(fn:string-join(for $x in $var890_resultof_map return xs:string($x), ' ')))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var894_result return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var899_resultof_map" as="node()*" select="$var5_resultof_map"/>
													<xsl:variable name="var900_result" as="xs:string*">
														<xsl:for-each select="((($var899_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
															<xsl:variable name="var895_resultof_map" as="xs:string*">
																<xsl:for-each select="node()[fn:boolean(self::text())]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var895_resultof_map return xs:string($x), ' ')), '@')">
																	<xsl:variable name="var896_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:variable name="var897_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var896_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var897_resultof_map return xs:string($x), ' ')), '@'))"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var898_resultof_map" as="xs:string*">
																		<xsl:for-each select="node()[fn:boolean(self::text())]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:sequence select="xs:string(fn:string-join(for $x in $var898_resultof_map return xs:string($x), ' '))"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var900_result return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var902_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var901_result, ' : '), xs:string(fn:string-join(for $x in $var902_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var904_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:when test="$var30_resultof_exists">
							<xsl:variable name="var913_resultof_map" as="node()*" select="$var5_resultof_map"/>
							<xsl:variable name="var914_result" as="xs:string*">
								<xsl:for-each select="((($var913_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var912_current" as="node()" select="."/>
									<xsl:variable name="var911_resultof_map" as="node()*" select="$var5_resultof_map"/>
									<xsl:for-each select="((($var911_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')])[fn:exists(node()[fn:boolean(self::text())])]">
										<xsl:variable name="var905_resultof_map" as="xs:string*">
											<xsl:for-each select="($var912_current/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var909_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var905_resultof_map return xs:string($x), ' ')), '@')">
													<xsl:variable name="var906_resultof_map" as="xs:string*">
														<xsl:for-each select="($var912_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="var907_resultof_map" as="xs:string*">
														<xsl:for-each select="($var912_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var906_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var907_resultof_map return xs:string($x), ' ')), '@'))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var908_resultof_map" as="xs:string*">
														<xsl:for-each select="($var912_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var908_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var910_resultof_map" as="xs:string*">
											<xsl:for-each select="node()[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:concat(fn:concat($var909_result, ' / '), xs:string(fn:string-join(for $x in $var910_resultof_map return xs:string($x), ' ')))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var914_result return xs:string($x), ' '))"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="var919_resultof_map" as="node()*" select="$var5_resultof_map"/>
							<xsl:variable name="var920_result" as="xs:string*">
								<xsl:for-each select="((($var919_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')])[fn:exists(node()[fn:boolean(self::text())])]">
									<xsl:variable name="var915_resultof_map" as="xs:string*">
										<xsl:for-each select="node()[fn:boolean(self::text())]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="fn:contains(xs:string(fn:string-join(for $x in $var915_resultof_map return xs:string($x), ' ')), '@')">
											<xsl:variable name="var916_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var917_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="fn:concat(fn:substring-before(xs:string(fn:string-join(for $x in $var916_resultof_map return xs:string($x), ' ')), '@'), fn:substring-after(xs:string(fn:string-join(for $x in $var917_resultof_map return xs:string($x), ' ')), '@'))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var918_resultof_map" as="xs:string*">
												<xsl:for-each select="node()[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var918_resultof_map return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:variable>
							<xsl:sequence select="xs:string(fn:string-join(for $x in $var920_result return xs:string($x), ' '))"/>
						</xsl:otherwise>
					</xsl:choose>
				</title>
			</xsl:if>
		</xsl:variable>
		<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:dcr="http://www.isocat.org/ns/dcr">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://www.tei-c.org/ns/1.0 //psf/Home/Documents/projects/konzepte/Sub-Schema/my/pica2tei/tei_lite.xsd'"/>
			<teiHeader>
				<fileDesc>
					<titleStmt>
						<xsl:sequence select="$var921_val"/>
						<xsl:variable name="var956_resultof_map" as="node()*" select="$var6_resultof_map"/>
						<xsl:for-each select="$var956_resultof_map">
							<xsl:call-template name="agt:MapTotei_lite_var955_function">
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
						<xsl:variable name="var991_resultof_map" as="node()*" select="$var3_resultof_map"/>
						<xsl:for-each select="$var991_resultof_map">
							<xsl:call-template name="agt:MapTotei_lite_var990_function">
								<xsl:with-param name="par0" select="." as="node()"/>
							</xsl:call-template>
						</xsl:for-each>
					</titleStmt>
					<sourceDesc>
						<bibl>
							<xsl:sequence select="$var921_val"/>
							<xsl:variable name="var992_let" as="node()*" select="$var11_val"/>
							<xsl:variable name="var1016_result" as="xs:boolean">
								<xsl:choose>
									<xsl:when test="fn:exists($var992_let)">
										<xsl:sequence select="fn:false()"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var993_resultof_map" as="node()*" select="$var7_resultof_map"/>
										<xsl:variable name="var994_val" as="node()*">
											<xsl:for-each select="(($var993_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var995_resultof_map" as="node()*" select="$var7_resultof_map"/>
										<xsl:variable name="var996_let" as="node()*">
											<xsl:for-each select="(($var995_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
												<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</subfield>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var1004_result" as="xs:string?">
											<xsl:choose>
												<xsl:when test="fn:exists($var996_let)">
													<xsl:variable name="var1000_let" as="node()*" select="$var994_val"/>
													<xsl:variable name="var1001_val" as="xs:string*">
														<xsl:for-each select="($var1000_let/node())[fn:boolean(self::text())]">
															<xsl:variable name="var999_current" as="node()" select="."/>
															<xsl:variable name="var997_resultof_map" as="node()*" select="$var7_resultof_map"/>
															<xsl:variable name="var998_let" as="node()*">
																<xsl:for-each select="(($var997_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
																	<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</subfield>
																</xsl:for-each>
															</xsl:variable>
															<xsl:for-each select="($var998_let/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:concat(fn:concat(fn:string($var999_current), ' - '), fn:string(.))"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:if test="fn:exists($var1001_val)">
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var1001_val return xs:string($x), ' '))"/>
													</xsl:if>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var1002_let" as="node()*" select="$var994_val"/>
													<xsl:variable name="var1003_val" as="xs:string*">
														<xsl:for-each select="($var1002_let/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:if test="fn:exists($var1003_val)">
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var1003_val return xs:string($x), ' '))"/>
													</xsl:if>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:sequence select="fn:exists($var1004_result)"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="$var1016_result">
								<xsl:variable name="var1005_resultof_map" as="node()*" select="$var7_resultof_map"/>
								<xsl:variable name="var1006_val" as="node()*">
									<xsl:for-each select="(($var1005_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1007_resultof_map" as="node()*" select="$var7_resultof_map"/>
								<xsl:variable name="var1008_let" as="node()*">
									<xsl:for-each select="(($var1007_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<date>
									<xsl:choose>
										<xsl:when test="fn:exists($var1008_let)">
											<xsl:variable name="var1012_let" as="node()*" select="$var1006_val"/>
											<xsl:variable name="var1013_result" as="xs:string*">
												<xsl:for-each select="($var1012_let/node())[fn:boolean(self::text())]">
													<xsl:variable name="var1011_current" as="node()" select="."/>
													<xsl:variable name="var1009_resultof_map" as="node()*" select="$var7_resultof_map"/>
													<xsl:variable name="var1010_let" as="node()*">
														<xsl:for-each select="(($var1009_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'b')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:for-each select="($var1010_let/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:concat(fn:concat(fn:string($var1011_current), ' - '), fn:string(.))"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1013_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var1014_let" as="node()*" select="$var1006_val"/>
											<xsl:variable name="var1015_result" as="xs:string*">
												<xsl:for-each select="($var1014_let/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1015_result return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</date>
							</xsl:if>
							<xsl:variable name="var1024_result" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var38_resultof_exists">
										<xsl:variable name="var1020_let" as="node()*" select="$var9_val"/>
										<xsl:variable name="var1021_val" as="xs:string*">
											<xsl:for-each select="($var1020_let/node())[fn:boolean(self::text())]">
												<xsl:variable name="var1019_current" as="node()" select="."/>
												<xsl:variable name="var1017_resultof_map" as="node()*" select="$var7_resultof_map"/>
												<xsl:variable name="var1018_let" as="node()*">
													<xsl:for-each select="(($var1017_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
														<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
															<xsl:sequence select="(./@node(), ./node())"/>
														</subfield>
													</xsl:for-each>
												</xsl:variable>
												<xsl:for-each select="($var1018_let/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:concat(fn:concat(fn:string($var1019_current), ' - '), fn:string(.))"/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists($var1021_val)">
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1021_val return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:variable name="var1022_let" as="node()*" select="$var9_val"/>
										<xsl:variable name="var1023_val" as="xs:string*">
											<xsl:for-each select="($var1022_let/node())[fn:boolean(self::text())]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists($var1023_val)">
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1023_val return xs:string($x), ' '))"/>
										</xsl:if>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var1024_result)">
								<date>
									<xsl:choose>
										<xsl:when test="$var38_resultof_exists">
											<xsl:variable name="var1028_let" as="node()*" select="$var9_val"/>
											<xsl:variable name="var1029_result" as="xs:string*">
												<xsl:for-each select="($var1028_let/node())[fn:boolean(self::text())]">
													<xsl:variable name="var1027_current" as="node()" select="."/>
													<xsl:variable name="var1025_resultof_map" as="node()*" select="$var7_resultof_map"/>
													<xsl:variable name="var1026_let" as="node()*">
														<xsl:for-each select="(($var1025_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'd')]">
															<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
																<xsl:sequence select="(./@node(), ./node())"/>
															</subfield>
														</xsl:for-each>
													</xsl:variable>
													<xsl:for-each select="($var1026_let/node())[fn:boolean(self::text())]">
														<xsl:sequence select="fn:concat(fn:concat(fn:string($var1027_current), ' - '), fn:string(.))"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1029_result return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var1030_let" as="node()*" select="$var9_val"/>
											<xsl:variable name="var1031_result" as="xs:string*">
												<xsl:for-each select="($var1030_let/node())[fn:boolean(self::text())]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var1031_result return xs:string($x), ' '))"/>
										</xsl:otherwise>
									</xsl:choose>
								</date>
							</xsl:if>
							<xsl:variable name="var1032_let" as="node()*" select="$var11_val"/>
							<xsl:for-each select="($var1032_let/node())[fn:boolean(self::text())]">
								<date>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var1033_resultof_map" as="node()*" select="$var7_resultof_map"/>
							<xsl:variable name="var1034_let" as="node()*">
								<xsl:for-each select="(($var1033_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="($var1034_let/node())[fn:boolean(self::text())]">
								<date>
									<xsl:sequence select="fn:string(.)"/>
								</date>
							</xsl:for-each>
							<xsl:variable name="var1073_resultof_map" as="node()*" select="$var6_resultof_map"/>
							<xsl:for-each select="$var1073_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1072_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1112_resultof_map" as="node()*" select="$var3_resultof_map"/>
							<xsl:for-each select="$var1112_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1111_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1123_resultof_map" as="node()*">
								<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '029A')]">
									<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</datafield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1123_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1122_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1138_resultof_map" as="node()*">
								<xsl:for-each select="$var1_record">
									<xsl:variable name="var1134_datafield" as="node()+" select="ns0:datafield"/>
									<xsl:variable name="var1137_resultof_filter" as="node()*">
										<xsl:for-each select="$var1134_datafield">
											<xsl:variable name="var1135_resultof_map" as="node()*">
												<xsl:for-each select="$var1134_datafield[(fn:string(@tag) = '028A')]">
													<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
														<xsl:sequence select="(./@node(), ./node())"/>
													</datafield>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var1136_resultof_logical_and" as="xs:boolean" select="((fn:string(@tag) = '029F') and (fn:count($var1135_resultof_map) = xs:decimal('0')))"/>
											<xsl:if test="$var1136_resultof_logical_and">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var1137_resultof_filter">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1138_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1133_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1176_resultof_map" as="node()*">
								<xsl:for-each select="$var1_record">
									<xsl:variable name="var1175_resultof_filter" as="node()*">
										<xsl:for-each select="ns0:datafield">
											<xsl:variable name="var1173_resultof_cast" as="xs:string" select="fn:string(@tag)"/>
											<xsl:variable name="var1174_resultof_any" as="xs:boolean" select="fn:exists((($var1173_resultof_cast = '028C'), ($var1173_resultof_cast = '028D'))[.])"/>
											<xsl:if test="$var1174_resultof_any">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var1175_resultof_filter">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1176_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1172_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1177_resultof_map" as="node()*" select="$var4_resultof_map"/>
							<xsl:variable name="var1178_let" as="node()*">
								<xsl:for-each select="(($var1177_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'n')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1178_let">
								<publisher>
									<xsl:sequence select="fn:string(.)"/>
								</publisher>
							</xsl:for-each>
							<xsl:variable name="var1182_resultof_map" as="node()*">
								<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '033J')]">
									<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</datafield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1182_resultof_map">
								<xsl:call-template name="agt:MapTotei_lite_var1181_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
							<xsl:variable name="var1183_resultof_map" as="node()*" select="$var4_resultof_map"/>
							<xsl:variable name="var1184_let" as="node()*">
								<xsl:for-each select="(($var1183_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'p')]">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1184_let">
								<pubPlace>
									<xsl:sequence select="fn:string(.)"/>
								</pubPlace>
							</xsl:for-each>
							<xsl:variable name="var1189_let" as="node()*">
								<xsl:variable name="var1186_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '034D')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1186_resultof_map/ns0:subfield">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
								<xsl:variable name="var1187_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '034M')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1187_resultof_map/ns0:subfield">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
								<xsl:variable name="var1188_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '034I')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1188_resultof_map/ns0:subfield">
									<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
										<xsl:sequence select="(./@node(), ./node())"/>
									</subfield>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var1189_let">
								<xsl:call-template name="agt:MapTotei_lite_var1185_function">
									<xsl:with-param name="par0" select="." as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</bibl>
					</sourceDesc>
				</fileDesc>
				<profileDesc>
					<xsl:variable name="var1191_resultof_map" as="node()*">
						<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '010@')]">
							<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</datafield>
						</xsl:for-each>
					</xsl:variable>
					<langUsage>
						<xsl:for-each select="$var1191_resultof_map/ns0:subfield">
							<language>
								<xsl:variable name="var1190_let" as="node()?">
									<xsl:if test="(fn:exists(@code) and (fn:string(@code) = 'a'))">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:if>
								</xsl:variable>
								<xsl:for-each select="$var1190_let">
									<xsl:attribute name="ident" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:sequence select="''"/>
							</language>
						</xsl:for-each>
					</langUsage>
					<textClass>
						<xsl:variable name="var1193_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '045F')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var1194_let" as="node()*">
							<xsl:for-each select="$var1193_resultof_map/ns0:subfield">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var1194_let[fn:exists(@code)][(fn:string(@code) = 'a')]">
							<classCode>
								<xsl:variable name="var1192_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '045F')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="(($var1192_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'e')]">
									<xsl:attribute name="scheme" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
								</xsl:for-each>
								<xsl:sequence select="fn:string(.)"/>
							</classCode>
						</xsl:for-each>
						<xsl:variable name="var1207_resultof_map" as="node()*">
							<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '044S')]">
								<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</datafield>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var1208_let" as="node()*">
							<xsl:for-each select="(($var1207_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'a')]">
								<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
									<xsl:sequence select="(./@node(), ./node())"/>
								</subfield>
							</xsl:for-each>
						</xsl:variable>
						<keywords>
							<xsl:for-each select="$var1208_let">
								<xsl:variable name="var1206_current" as="node()" select="."/>
								<xsl:variable name="var1205_index" as="xs:integer" select="position()"/>
								<xsl:variable name="var1203_resultof_map" as="node()*">
									<xsl:for-each select="($var1_record/ns0:datafield)[(fn:string(@tag) = '044S')]">
										<datafield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</datafield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var1204_let" as="node()*">
									<xsl:for-each select="(($var1203_resultof_map/ns0:subfield)[fn:exists(@code)])[(fn:string(@code) = 'g')]">
										<subfield xmlns="info:srw/schema/5/picaXML-v1.0">
											<xsl:sequence select="(./@node(), ./node())"/>
										</subfield>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var1204_let">
									<xsl:variable name="var1202_current" as="node()" select="."/>
									<xsl:variable name="var1198_result" as="xs:string?">
										<xsl:choose>
											<xsl:when test="($var1205_index = position())">
												<xsl:if test="fn:exists((($var1206_current/node())[fn:boolean(self::text())])[fn:exists(($var1202_current/node())[fn:boolean(self::text())])])">
													<xsl:variable name="var1196_resultof_map" as="xs:string*">
														<xsl:for-each select="($var1206_current/node())[fn:boolean(self::text())]">
															<xsl:variable name="var1195_current" as="node()" select="."/>
															<xsl:for-each select="($var1202_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:string($var1195_current), ' ['), fn:string(.)), ']')"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1196_resultof_map return xs:string($x), ' '))"/>
												</xsl:if>
											</xsl:when>
											<xsl:otherwise>
												<xsl:if test="fn:exists(($var1206_current/node())[fn:boolean(self::text())])">
													<xsl:variable name="var1197_resultof_map" as="xs:string*">
														<xsl:for-each select="($var1206_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1197_resultof_map return xs:string($x), ' '))"/>
												</xsl:if>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:if test="fn:exists($var1198_result)">
										<term>
											<xsl:choose>
												<xsl:when test="($var1205_index = position())">
													<xsl:variable name="var1200_resultof_map" as="xs:string*">
														<xsl:for-each select="($var1206_current/node())[fn:boolean(self::text())]">
															<xsl:variable name="var1199_current" as="node()" select="."/>
															<xsl:for-each select="($var1202_current/node())[fn:boolean(self::text())]">
																<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:string($var1199_current), ' ['), fn:string(.)), ']')"/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1200_resultof_map return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var1201_resultof_map" as="xs:string*">
														<xsl:for-each select="($var1206_current/node())[fn:boolean(self::text())]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var1201_resultof_map return xs:string($x), ' '))"/>
												</xsl:otherwise>
											</xsl:choose>
										</term>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</keywords>
					</textClass>
				</profileDesc>
			</teiHeader>
		</TEI>
	</xsl:template>
</xsl:stylesheet>
